mod lib;
use lib::imgthin;

fn main() {
    let img:Vec<Vec<u8>> = vec!(
            vec!(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
            vec!(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
            vec!(0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0),
            vec!(0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0),
            vec!(0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0),
            vec!(0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0),
            vec!(0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0),
            vec!(0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0),
            vec!(0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0),
            vec!(0,0,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,0,0),
            vec!(0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0),
            vec!(0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0),
            vec!(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
            vec!(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
            vec!(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
            vec!(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
            vec!(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
            vec!(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
            vec!(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0),
        ) ;

    let bin_img: Vec<Vec<bool>> = img.iter().map(|row|{
        row.iter().map(|val|{
            *val ==1 
        }).collect()
    }).collect();

    println!("Passed Image:-");
    for row in &bin_img {
        for val in row {
            print!("{}", if val.to_owned() {"X"} else {" "});
        }
        print!("\n");
    }


    let thinned = imgthin(bin_img).unwrap();

    println!("Thinned Image:-");
    for row in thinned {
        for val in row {
            print!("{}", if val {"X"} else {" "});
        }
        print!("\n");
    }
}
